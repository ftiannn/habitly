name: Deploy

permissions:
  contents: read
  actions: read
  checks: read

on:
  workflow_dispatch:
    inputs:
      what:
        description: "What to deploy"
        required: true
        type: choice
        options:
          - infrastructure-prod
          - backend-prod
          - everything-prod

      deployment_type:
        description: "Deployment source"
        required: true
        type: choice
        options:
          - "Branch (latest commit)"
          - "Specific commit SHA"
          - "Tagged release"
        default: "Branch (latest commit)"

      branch_name:
        description: "Branch name (e.g., main, develop, feature/xyz)"
        required: false
        type: string
        default: "main"

      commit_sha:
        description: "Exact commit SHA (e.g., a1b2c3d4e5f6789...)"
        required: false
        type: string

      tag_name:
        description: "Tag name (e.g., v1.2.3, release-2024-01)"
        required: false
        type: string

      confirm:
        description: 'Type "GO" to confirm deployment'
        required: true
        type: string

jobs:
  verify-deployment:
    name: Verify Deployment
    runs-on: ubuntu-latest
    outputs:
      commit-sha: ${{ steps.resolve-commit.outputs.commit-sha }}
      commit-message: ${{ steps.resolve-commit.outputs.commit-message }}
      commit-ref: ${{ steps.resolve-commit.outputs.commit-ref }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Resolve Commit Reference
        id: resolve-commit
        run: |
          echo "Resolving deployment source..."

          # Determine which input to use based on deployment_type
          case "${{ inputs.deployment_type }}" in
            "Branch (latest commit)")
              if [ -z "${{ inputs.branch_name }}" ]; then
                echo "Error: Branch name is required for branch deployment"
                exit 1
              fi
              COMMIT_REF="${{ inputs.branch_name }}"
              SOURCE_TYPE="branch"
              ;;
            "Specific commit SHA")
              if [ -z "${{ inputs.commit_sha }}" ]; then
                echo "Error: Commit SHA is required for SHA deployment"
                exit 1
              fi
              COMMIT_REF="${{ inputs.commit_sha }}"
              SOURCE_TYPE="commit"
              ;;
            "Tagged release")
              if [ -z "${{ inputs.tag_name }}" ]; then
                echo "Error: Tag name is required for tag deployment"
                exit 1
              fi
              COMMIT_REF="${{ inputs.tag_name }}"
              SOURCE_TYPE="tag"
              ;;
            *)
              echo "Error: Invalid deployment type"
              exit 1
              ;;
          esac

          echo "Source type: $SOURCE_TYPE"
          echo "Reference: $COMMIT_REF"

          # Verify the reference exists
          if ! git rev-parse --verify "$COMMIT_REF" >/dev/null 2>&1; then
            echo "Error: Reference '$COMMIT_REF' not found in repository"
            echo "Make sure you've pushed the branch/tag or the SHA exists"
            exit 1
          fi

          # Resolve to full SHA
          COMMIT_SHA=$(git rev-parse "$COMMIT_REF")
          echo "Resolved to SHA: $COMMIT_SHA"

          # Get commit details
          COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s" "$COMMIT_SHA")
          COMMIT_AUTHOR=$(git log -1 --pretty=format:"%an" "$COMMIT_SHA")
          COMMIT_DATE=$(git log -1 --pretty=format:"%ad" --date=short "$COMMIT_SHA")

          # Save outputs
          echo "commit-sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "commit-message=$COMMIT_MESSAGE" >> $GITHUB_OUTPUT
          echo "commit-ref=$COMMIT_REF" >> $GITHUB_OUTPUT

          echo ""
          echo "DEPLOYMENT DETAILS"
          echo "================================"
          echo "Component: ${{ inputs.what }}"
          echo "Source: ${{ inputs.deployment_type }}"
          echo "Reference: $COMMIT_REF"
          echo "SHA: $COMMIT_SHA"
          echo "Message: $COMMIT_MESSAGE"
          echo "Author: $COMMIT_AUTHOR"
          echo "Date: $COMMIT_DATE"
          echo "================================"

      - name: Deployment Safety Check
        run: |
          echo "DEPLOYMENT SAFETY CHECKLIST"
          echo "================================"
          echo ""
          echo "Before proceeding, verify:"
          echo "1. CI is GREEN for SHA: ${{ steps.resolve-commit.outputs.commit-sha }}"
          echo "2. All tests passed"
          echo "3. Code review completed"
          echo "4. This is the correct code to deploy"
          echo "5. You have approval for production deployment"
          echo ""
          echo "Check CI status: https://github.com/${{ github.repository }}/actions"
          echo "View commit: https://github.com/${{ github.repository }}/commit/${{ steps.resolve-commit.outputs.commit-sha }}"
          echo ""

          if [ "${{ inputs.confirm }}" != "GO" ]; then
            echo "Error: Deployment not confirmed"
            exit 1
          fi

          echo "Safety checks acknowledged - proceeding with deployment..."

  deploy:
    name: Deploy ${{ inputs.what }}
    runs-on: ubuntu-latest
    environment: production
    needs: verify-deployment
    if: inputs.confirm == 'GO'

    env:
      API_URL_PROD: ${{ vars.API_URL_PROD }}

    steps:
      - name: Checkout Selected Commit
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.verify-deployment.outputs.commit-sha }}

      - name: Deployment Banner
        run: |
          echo "PRODUCTION DEPLOYMENT STARTING"
          echo "======================================"
          echo "Component: ${{ inputs.what }}"
          echo "Source: ${{ inputs.deployment_type }}"
          echo "Reference: ${{ needs.verify-deployment.outputs.commit-ref }}"
          echo "SHA: ${{ needs.verify-deployment.outputs.commit-sha }}"
          echo "Message: ${{ needs.verify-deployment.outputs.commit-message }}"
          echo "Environment: Production"
          echo "Timestamp: $(date)"
          echo "======================================"

      - name: Setup AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Deploy Infrastructure
        if: contains(inputs.what, 'infrastructure') || contains(inputs.what, 'everything')
        run: |
          echo "Deploying infrastructure..."
          cd infrastructure/environments/prod
          export TF_VAR_database_url="${{ secrets.PROD_DATABASE_URL }}"
          export TF_VAR_jwt_secret="${{ secrets.PROD_JWT_SECRET }}"
          export TF_VAR_google_client_id="${{ secrets.PROD_GOOGLE_CLIENT_ID }}"
          export TF_VAR_google_client_secret="${{ secrets.PROD_GOOGLE_CLIENT_SECRET }}"
          terraform init
          terraform plan
          terraform apply -auto-approve
          echo "Infrastructure deployment complete"

      - name: Deploy Backend
        if: contains(inputs.what, 'backend') || contains(inputs.what, 'everything')
        run: |
          echo "Deploying backend..."
          cd apps/backend
          npm install --include=dev
          npm run prisma:generate
          cat > .env << EOF
          DATABASE_URL="${{ secrets.PROD_DATABASE_URL }}"
          JWT_SECRET="${{ secrets.PROD_JWT_SECRET }}"
          GOOGLE_CLIENT_ID="${{ secrets.PROD_GOOGLE_CLIENT_ID }}"
          GOOGLE_CLIENT_SECRET="${{ secrets.PROD_GOOGLE_CLIENT_SECRET }}"
          STAGE="prod"
          NODE_ENV="production"
          AWS_REGION="ap-southeast-1"
          EOF
          npm run prisma:deploy
          npm install -g serverless@3
          npm run deploy:prod
          echo "Backend deployment complete"

      - name: Post-Deployment Verification
        run: |
          echo "Post-deployment verification..."
          echo "API URL: ${{ vars.API_URL_PROD }}"
          echo "Deployment completed at: $(date)"
          echo ""
          echo "DEPLOYMENT SUCCESSFUL"
          echo "================================"
          echo "Component: ${{ inputs.what }}"
          echo "SHA: ${{ needs.verify-deployment.outputs.commit-sha }}"
          echo "Environment: Production"
          echo "API: ${{ vars.API_URL_PROD }}"
          echo "Docs: ${{ vars.API_URL_PROD }}/docs"
          echo "================================"
